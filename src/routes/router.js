import { errorHandler403 } from '../utils/error-handler.js'

/**
 * Converts a route path with parameters (e.g., "/user/:id") into a regex pattern.
 * Also extracts parameter names for later use.
 *
 * @param {string} routePath - The route path (e.g., "/user/:id").
 * @returns {{ regex: RegExp, paramNames: string[] }} - An object containing the compiled regex and parameter names.
 */
function compileRoute(routePath) {
  const paramNames = []
  const regex = routePath.replace(/\/:(\w+)/g, (_, paramName) => {
    paramNames.push(paramName)
    return '/([^/]+)'
  })
  return { regex: new RegExp(`^${regex}$`), paramNames }
}

/**
 * Extracts parameters from the matched route path.
 *
 * @param {RegExpMatchArray} match - The result of matching the path against the route regex.
 * @param {string[]} paramNames - The names of the parameters in the route path.
 * @returns {Object.<string, string>} - An object mapping parameter names to their values.
 */
function extractParams(match, paramNames) {
  return paramNames.reduce((acc, paramName, index) => {
    acc[paramName] = match[index + 1]
    return acc
  }, {})
}

/**
 * Executes middleware functions. Handles both single middleware and arrays of middleware.
 *
 * @param {Function|Function[]} middleware - The middleware function or array of middleware functions.
 * @param {Object} context - The context object passed to middleware and handlers.
 * @param {Request} request - The incoming HTTP request.
 * @throws {Error} - If any middleware throws an error.
 */
function executeMiddleware(middleware, context, request, params) {
  if (typeof middleware === 'function') {
    middleware(context, request, params)
  } else {
    for (const mw of middleware) {
      mw(context, request, params)
    }
  }
}

/**
 * Handles the route handler, whether it's a string (for static pages) or a function.
 *
 * @param {Function} handler - The route handler function.
 * @param {Object} context - The context object passed to the handler.
 * @param {Request} request - The incoming HTTP request.
 * @param {Object.<string, string>} params - The route parameters extracted from the path.
 * @returns {Response} - The response generated by the handler.
 */
function handleRoute(handler, context, request, params) {
  return handler(context, request, params)
}

/**
 * Matches the request to a route and processes it (middleware, handler, etc.).
 *
 * @param {Object} context - The context object passed to middleware and handlers.
 * @param {Request} request - The incoming HTTP request.
 * @param {Array.<Array.<Function>>} routes - The array of route definitions.
 * @returns {Response|null} - The response generated by the matched route, or `null` if no route matches.
 */
export function matchAndProcessRoute(context, request, routes) {
  const url = new URL(request.url)
  const method = request.method
  const path = url.pathname

  for (const [routeMethod, routePath, handler, middleware = []] of routes) {
    if (routeMethod !== method) {
      continue
    }

    const { regex, paramNames } = compileRoute(routePath)
    const match = path.match(regex)

    if (match) {
      const params = extractParams(match, paramNames)

      try {
        executeMiddleware(middleware, context, request, params)
      } catch (error) {
        return errorHandler403(context, request, error)
      }
      return handleRoute(handler, context, request, params)
    }
  }

  return null // No match found
}
